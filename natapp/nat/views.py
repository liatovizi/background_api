from natapp.response import *
from natapp.blueprint import RegisteringBlueprint
from natapp.namespace import RegisteringNamespace as Namespace
import secrets
import hashlib
from dateutil import parser as dateparser
from natapp.libs.naterrors import Errors
from natapp import db
from natapp.users.auth import multi_auth, bgservice_auth, token_auth, get_userid, get_userrights
from natapp.users.decorator import update_last_auth_call, require_right
from natapp.nat.auth import app_auth, get_instanceid, get_instancestatus
from natapp.decorator import fmt_json_response, autocommit, req_method_decorator, fmt_json_response_dict

from natapp.libs.natusers import AccessRights, get_user_access_rights
from natapp.users.db import login as users_login
from natapp.users.db import user as users_user
from natapp.users import utils as users_utils
import natapp.libs.natutility as natutility
from natapp.libs import natemailsender
import natapp.libs.natusers as natusers
# from flask_restplus import Resource, fields, reqparse
from natapp.nat.db import auth as natdb
from flask import request
import natapp.nat.utils as nat_utils
import natapp.nat.models as nat_models
import natapp.nat.libs.siteendpoints as siteendpoints
import natapp.nat.libs.appendpoints as appendpoints
import natapp.nat.libs.adminendpoints as adminendpoints
import natapp.nat.libs.bgserviceendpoints as bgserviceendpoints
from datetime import timedelta, datetime
from flask_restx import Resource, fields, reqparse
import secrets
import string
import ujson
import binascii
import re
import time

nat = RegisteringBlueprint('tggapp', __name__, url_prefix="/tggapp/api/v1.0")
api = Namespace('tggapp', description='Natapp tggapp module')


class NullableString(fields.String):
    __schema_type__ = ['string', 'null']
    __schema_example__ = 'nullable string'


@nat.after_request
def apply_caching(response):
    r = request.headers["Origin"] if "Origin" in request.headers else "*"
    response.headers["Access-Control-Allow-Origin"] = r
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Headers"] = "content-type, authorization, doctype"
    response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS, GET, HEAD, PUT"
    return response


@api.route('app/getcurrenttimestamp')
class GetCurrentTimestamp(Resource):
    @api.requestdecorator('AppGetCurrenTimestamp',
                          jsonfields={},
                          response_200={
                              'timestamp':
                              fields.Integer(example=11111111111111,
                                             description="javascript/linux timestamp this alias is vaid from"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Returns current server time"""

        return RESP_OK, {
            'timestamp': round(datetime.now().timestamp() * 1000),
        }


@api.route('app/registerinstance')
class ListNews(Resource):
    @api.requestdecorator('AppRegisterInstance',
                          jsonfields={
                              'secret':
                              fields.String(example="abcd",
                                            description="preshared secret burnt into app",
                                            required=True),
                          },
                          response_200={
                              'instance_id':
                              fields.String(example="GUID-222",
                                            description="Player instance ID generated by the server"),
                              'access_token':
                              fields.String(example="sdfssdfdsfdsdfdsfds",
                                            description="bearer token generated by hte server for the client"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Register new application instance after installation"""

        if api.payload['secret'] != nat.config['TGG_APPLICATION_PSK']:
            return RESP_ERR, Errors.EGEN_unauth_E001

        return appendpoints.handle_registerinstance(db.session)


@api.route('app/getactivationcode')
class GetActivationCode(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator('AppGetActivationCode',
                          jsonfields={},
                          response_200={
                              'activation_code':
                              fields.String(example="123456789",
                                            description="Activation code generated for the player"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Get (new) activation code for instance"""

        return appendpoints.handle_getactivationcode(db.session, instance_id=get_instanceid())


@api.route('app/heartbeat')
class Heartbeat(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator('AppHeartBeat',
                          jsonfields={
                              'version': fields.Integer(example=1, description="heartbeat format version"),
                              'instance_id': fields.String(example="abcd", description="instance_id"),
                              'timestamp': fields.Integer(example=111111, description="timestamp in MS"),
                              'sw_version': fields.String(example="1.2", description="sw_version"),
                              'logs': fields.String(example="JSON", description="logs"),
                              'telemetry': fields.String(example="JSON", description="telemetry"),
                          },
                          response_200={
                              'status':
                              fields.String(example="activated",
                                            enum=["unregistered", "registered", "activated"],
                                            description="Player instance ID generated by the server"),
                              'update_channel':
                              fields.String(example="alpha",
                                            enum=["alpha", "beta", "stable"],
                                            description="SW update channel of the player instance"),
                              'content_update':
                              fields.Boolean(example=True, description="force content update"),
                              'sw_update':
                              fields.Boolean(example=True, description="force sw update"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Player heartbeat"""

        params = {}
        params['version'] = api.payload["version"] if 'version' in api.payload else None
        params['instance_id_in'] = int(api.payload["instance_id"]) if 'instance_id' in api.payload else None
        params['timestamp'] = api.payload["timestamp"] if 'timestamp' in api.payload else None
        params['sw_version'] = api.payload["sw_version"] if 'sw_version' in api.payload else None
        params['logs'] = api.payload["logs"] if 'logs' in api.payload else None
        params['logdir'] = nat.config.get('TGG_APPLICATION_DEVICELOG_DIR', '')
        params['telemetry'] = api.payload["telemetry"] if 'telemetry' in api.payload else None

        return appendpoints.handle_heartbeat(db.session,
                                             instance_id=get_instanceid(),
                                             status=get_instancestatus(),
                                             **params)


@api.route('app/checkuserpin')
class CheckUserPin(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator('AppCheckUserPin',
                          jsonfields={
                              'pin_code': fields.String(example="12345678", description="user pin code", required=True),
                          },
                          response_200={
                              'success':
                              fields.Boolean(example=False, description="PIN accepted or not?"),
                              'user_id':
                              fields.String(example="111",
                                            description="user ID matchching the pin (in case of success)"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Check user PIN code validity"""

        params = {}
        params['pin_code'] = api.payload["pin_code"]

        return appendpoints.handle_checkuserpin(db.session,
                                                instance_id=get_instanceid(),
                                                status=get_instancestatus(),
                                                **params)


@api.route('app/getlayout')
class AppGetLayout(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator(
        'AppGetLayout',
        jsonfields={},
        #response_200=fields.Arbitrary(description="json file describing the layout"),
        errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Returns the current menu layout for the player"""

        return appendpoints.handle_getlayout(db.session, instance_id=get_instanceid(), status=get_instancestatus())


@api.route('app/listplaylists')
class AppListPlaylists(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator(
        'AppListPlaylists',
        jsonfields={
            #'instance_id': fields.String(example="abcd", description="instance_id"),
            'user_id': fields.String(example="12345678", description="user id"),
            #'last_timestamp': fields.Integer(example=111111, description="last time the user playlists"
            #                                                              "were downloaded"),
        },
        response_200=[{
            'playlist_id':
            fields.String(example="111", description="playlist_id"),
            'name':
            fields.String(example="My litl playlist", description="name"),
            'description':
            fields.String(example="My litl playlist is a playlist created by me",
                          description="description of the playlist"),
            'class_collective':
            fields.Boolean(example=True, description="Show whether playlist is class collective or not"),
            'tracks':
            fields.List(fields.Integer(example=1223, description="track id")),
            'meta':
            fields.String(example='{"classType": "strength", "lehgthType": 45}',
                          description="playlist description metadata for the UI"),
        }],
        errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Return all _not hidden_ playlist of user_id or globalplaylistst if user_id is None"""

        user_id = api.payload['user_id'] if 'user_id' in api.payload else None

        return appendpoints.handle_listplaylists(db.session,
                                                 instance_id=get_instanceid(),
                                                 status=get_instancestatus(),
                                                 user_id=user_id)


@api.route('app/gettrackfiles')
class AppGetTrackFiles(Resource):
    @api.doc(security=['tokenAuth'])
    @app_auth.login_required
    @api.requestdecorator('AppGetTrackFiles',
                          jsonfields={
                              'tracks': fields.List(fields.String(example="123", description="track ids"),
                                                    required=False),
                          },
                          response_200=[{
                              'track_id': fields.String(example="111", description="playlist_id"),
                              'title': fields.String(example="A b c", description="title of track"),
                              'artist': fields.String(example="kozso", description="artist"),
                              'duration': fields.Integer(example=123, description="track length in seconds"),
                              'sha256': fields.String(example="aaaaaaaaa", description="checksum"),
                              'url': fields.String(example="http://dddd", description="track url"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Get all tracks (if tracks list is None, else the tracks in the list) changed since last_timestamp or all if
        last_timestamp = 0 or None"""

        tracks = api.payload['tracks'] if 'tracks' in api.payload else None

        return appendpoints.handle_gettrackfiles(db.session,
                                                 instance_id=get_instanceid(),
                                                 status=get_instancestatus(),
                                                 tracks=tracks)


@api.route('private/listappusers')
class ListAppUsers(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator(
        'ListAppUsers',
        jsonfields={},
        response_200=[{
            'user_id': fields.String(example="1", description="instance id"),
            'email_address': fields.String(example="a@b.c", description="user email address"),
            #                              'superuser':
            #                              fields.Boolean(example=False, description="set the superuser role flag", required=False),
        }],
        errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """List all tggapp users for microsite superuser"""

        return siteendpoints.handle_listappusers(db.session, user_id=get_userid())


@api.route('private/gettrackfiles')
class GetTrackFiles(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right(AccessRights.TGGAPP_USER)
    @api.requestdecorator('GetTrackFiles',
                          jsonfields={
                              'tracks': fields.List(fields.String(example="123", description="track ids"),
                                                    required=True),
                          },
                          response_200=[{
                              'track_id':
                              fields.String(example="1", description="playlist id"),
                              'title':
                              fields.String(example="Dal 1", description="track title"),
                              'composer_name':
                              fields.String(example="Kiss Pisti", description="composer name"),
                              'duration':
                              fields.Integer(example=111, description="duration in seconds"),
                              'tag_ids':
                              fields.List(fields.String(example="12", description="tag id"),
                                          description="list of gende and mood tag ids"),
                              'energey_level':
                              fields.String(example="high", description="main energy level"),
                              'bpm':
                              fields.Integer(example=123, description="BPM"),
                              'url':
                              fields.String(example="http://asdads", description="track url"),
                              'first_used_at':
                              fields.Integer(description='time this track  was first used (added tomicrisite)',
                                             example=123245)
                          }],
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Get all tracks from list"""

        tracks = api.payload['tracks']

        return siteendpoints.handle_gettrackfiles(db.session, user_id=get_userid(), tracks=tracks)


#        return RESP_OK, {
#            'tracks': [
#                {'track_id': "1", 'timestamp': round(datetime.now().timestamp() * 1000), 'duration': 157, 'title': "Halleluja", 'artist': 'Cucu cica', 'sha256': 'e95b5f32debd163bdd4e07881361c196d02bdb653a02a8a443546414e6e2d468', 'url': nat.config['API_ENDPOINT'] + '/../../../static/1.mp3'},
#                {'track_id': "2", 'timestamp': round(datetime.now().timestamp() * 1000), 'duration': 143, 'title': "Kokós Jumbo", 'artist': 'Kozsó', 'sha256': 'e9402c2f5fee3193a33a1a3167361798b63d422588b5c9183ec7ef599dac6288', 'url': nat.config['API_ENDPOINT'] + '/../../../static/2.mp3'},
#                {'track_id': "3", 'timestamp': round(datetime.now().timestamp() * 1000), 'duration': 194, 'title': "Isten", 'artist': 'fia', 'sha256': 'bc7d9c466b06001f33b31dd0265e02b77019dbb45bd9c0a8dbe1a8c952260e0a', 'url': nat.config['API_ENDPOINT'] + '/../../../static/3.mp3'},
#                {'track_id': "4", 'timestamp': 1500000000000, 'duration': 157, 'title': "Halleluja (ogg)", 'artist': 'Cucu cica', 'sha256': '29dc54b56d5a5f9671d591329ed84e75a033a0fba8fe00624bc9e6b52c7f557d', 'url': nat.config['API_ENDPOINT'] + '/../../../static/1.ogg'},
#                {'track_id': "5", 'timestamp': 1500000000000, 'duration': 143, 'title': "Kokós Jumbo (ogg)", 'artist': 'Kozsó', 'sha256': 'a61750793407e7c975ae1dd47bedb18f26b8668529d51e3040b5183749d48206', 'url': nat.config['API_ENDPOINT'] + '/../../../static/2.ogg'},
#                {'track_id': "6", 'timestamp': 1500000000000, 'duration': 194, 'title': "Isten (ogg)", 'artist': 'fia', 'sha256': 'f723978932ccf7b1fdfa5b3120ac24ff218d9f3ddb9dab3db90042072b3f79c2', 'url': nat.config['API_ENDPOINT'] + '/../../../static/3.ogg'},
#            ],
#        }


@api.route('private/getlayout')
class GetLayout(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right(AccessRights.TGGAPP_USER)
    @api.requestdecorator(
        'GetLayout',
        jsonfields={},
        #response_200=fields.Arbitrary(description="json file describing the layout"),
        errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Returns the current menu layout for the player"""

        return siteendpoints.handle_getlayout(db.session, user_id=get_userid(), userrights=get_userrights())


@api.route('private/listplaylists')
class ListPlaylists(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('ListPlaylists',
                          jsonfields={},
                          response_200=[{
                              'playlist_id':
                              fields.String(example="1", description="playlist id"),
                              'user_id':
                              fields.String(example="123", description="user_id this playlist belongs to"),
                              'name':
                              fields.String(example="Very good pplaylist", description="playlist name"),
                              'description':
                              fields.String(example="it is indeed so good that whoahh",
                                            description="playlist description"),
                              'meta':
                              fields.String(example='{"classType": "strength", "lehgthType": 45}',
                                            description="playlist description metadata for the UI"),
                              'class_collective':
                              fields.Boolean(example=False, description="true if playlist is class collective"),
                              'deleted':
                              fields.Boolean(example=False,
                                             description="true if playlist has been deleted and in recycle bin"),
                              'created_at':
                              fields.Integer(description='tikme this playlist was created/modified', example=123245)
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get all _not hidden_ playlists that matches the search criteria"""

        return siteendpoints.handle_listplaylists(db.session, user_id=get_userid(), userrights=get_userrights())


@api.route('private/getplaylist')
class GetPlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('GetPlaylist',
                          jsonfields={
                              'playlist_id': fields.String(example="12", description="playlist's id", required=True),
                          },
                          response_200={
                              'playlist_id':
                              fields.String(example="1", description="playlist id"),
                              'user_id':
                              fields.String(example="123", description="user_id this playlist belongs to"),
                              'name':
                              fields.String(example="Very good pplaylist", description="playlist name"),
                              'description':
                              fields.String(example="it is indeed so good that whoahh",
                                            description="playlist description"),
                              'meta':
                              fields.String(example='{"classType": "strength", "lehgthType": 45}',
                                            description="playlist description metadata for the UI"),
                              'tracks':
                              fields.List(fields.String(example="123", description="track ids")),
                              'deleted':
                              fields.Boolean(example=False,
                                             description="true if playlist has been deleted and in recycle bin"),
                              'created_at':
                              fields.Integer(description='tikme this playlist was created/modified', example=123245)
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get all data of a _not hidden_ playlist (incl. tracks)"""

        playlist_id = int(api.payload['playlist_id'])

        return siteendpoints.handle_getplaylist(db.session,
                                                user_id=get_userid(),
                                                playlist_id=playlist_id,
                                                userrights=get_userrights())


@api.route('private/removeplaylist')
class RemovePlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('RemovePlaylist',
                          jsonfields={
                              'playlist_id': fields.String(example="12", description="playlist's id", required=True),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """mark playlist for removal form library"""

        playlist_id = int(api.payload['playlist_id'])

        return siteendpoints.handle_removeplaylist(db.session,
                                                   user_id=get_userid(),
                                                   userrights=get_userrights(),
                                                   playlist_id=playlist_id)


@api.route('private/restoreplaylist')
class RestorePlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('RemovePlaylist',
                          jsonfields={
                              'playlist_id': fields.String(example="12", description="playlist's id", required=True),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """unmark playlist for removal form library"""

        playlist_id = int(api.payload['playlist_id'])

        return siteendpoints.handle_restoreplaylist(db.session,
                                                    user_id=get_userid(),
                                                    userrights=get_userrights(),
                                                    playlist_id=playlist_id)


@api.route('private/addplaylist')
class AddPlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('AddPlaylist',
                          jsonfields={
                              'name':
                              fields.String(example="Very good pplaylist",
                                            min_length=2,
                                            description="playlist name",
                                            required=True),
                              'description':
                              fields.String(example="it is indeed so good that whoahh",
                                            description="playlist description",
                                            required=True),
                              'user_id':
                              fields.String(example="1", description="user id", required=False),
                              'tracks':
                              fields.List(fields.String(example="123", description="track ids"), required=False),
                          },
                          response_200={
                              'playlist_id': fields.String(example="1", description="playlist id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """create user playlist"""

        params = {}
        params['name'] = (api.payload["name"])
        params['description'] = (api.payload["description"])
        params['user_id_in'] = int(api.payload["user_id"]) if 'user_id' in api.payload else get_userid()
        params['tracks'] = [int(t) for t in api.payload["tracks"]] if 'tracks' in api.payload else None

        return siteendpoints.handle_addplaylist(db.session, user_id=get_userid(), userrights=get_userrights(), **params)


@api.route('private/updateplaylist')
class UpdatePlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_USER, AccessRights.TGGAPP_SUPERUSER])
    @api.requestdecorator('UpdatePlaylist',
                          jsonfields={
                              'playlist_id':
                              fields.String(example="1", description="playlist id", required=True),
                              'name':
                              fields.String(example="Very good pplaylist",
                                            min_length=2,
                                            description="playlist name",
                                            required=False),
                              'description':
                              fields.String(example="it is indeed so good that whoahh",
                                            description="playlist description",
                                            required=False),
                              'tracks':
                              fields.List(fields.String(example="123", description="track ids"), required=False),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """create user playlist"""

        params = {}
        params['playlist_id'] = int(api.payload["playlist_id"])
        params['name'] = api.payload["name"] if 'name' in api.payload else None
        params['description'] = api.payload["description"] if 'description' in api.payload else None
        params['tracks'] = [int(t) for t in api.payload["tracks"]] if 'tracks' in api.payload else None

        return siteendpoints.handle_updateplaylist(db.session,
                                                   user_id=get_userid(),
                                                   userrights=get_userrights(),
                                                   **params)


@api.route('private/listtags')
class ListTags(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right(AccessRights.TGGAPP_USER)
    @api.requestdecorator('ListTags',
                          jsonfields={},
                          response_200=[{
                              'type':
                              fields.String(example="metadata",
                                            enum=["metadata", "genre", "mood"],
                                            description="Tag type",
                                            required=True),
                              'label':
                              fields.String(example="labelke", description="tag label", required=True),
                              'sublabel':
                              fields.String(example="sublabelke", description="tag sublabel (now onnly for genres)"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Return available tags"""

        return siteendpoints.handle_listtags(db.session, user_id=get_userid())


@api.route('private/listfiltertags')
class ListTags(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right(AccessRights.TGGAPP_USER)
    @api.requestdecorator('ListTags',
                          jsonfields={},
                          response_200=[{
                              'type':
                              fields.String(example="gene",
                                            enum=["genre", "mood"],
                                            description="Tag type",
                                            required=True),
                              'label':
                              fields.String(example="labelke", description="tag label", required=True),
                              'sublabel':
                              fields.String(example="sublabelke", description="tag sublabel (now onnly for genres)"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Return all ags (except metadata) that are used by tracks available on the microsite"""

        return siteendpoints.handle_listfiltertags(db.session, user_id=get_userid())


@api.route('private/searchlibrary')
class SearchLibrary(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right(AccessRights.TGGAPP_USER)
    @api.requestdecorator(
        'SearchLibrary',
        jsonfields={
            'bmp_min':
            fields.Integer(example=12, description="show tracks with at least this bpm)", required=False),
            'bpm_max':
            fields.Integer(example=155, description="show tracks with at most this bpm)", required=False),
            'first_used_at_min':
            fields.Integer(
                example=12,
                description="track was first added to the microsita no earlier than this value (timestamp in ms)",
                required=False),
            'first_used_at_max':
            fields.Integer(
                example=155,
                description="track was first added to the microsita no later than this value (timestamp in ms)",
                required=False),
            'filters':
            fields.List(
                fields.Nested(
                    api.model(
                        "SearchLibraryFilters", {
                            'filter':
                            fields.String(
                                example="title",
                                enum=['title', 'composer_name', 'genre', 'energy_level', 'mood', 'metadata', 'generic'],
                                description="filter name",
                                required=True),
                            'values':
                            fields.List(fields.String(example="józsi",
                                                      description="filter value - % is the wildcard; case insensitive",
                                                      required=True),
                                        required=True)
                        }))),
            'order':
            fields.String(enum=['ascending', 'descending'], default='ascending'),
            'order_by':
            fields.String(enum=['title', 'composer_name', 'bpm', 'energy_level', 'duration', 'first_used_at'],
                          example='title',
                          default='title'),
            'page':
            fields.Integer(example=1, default=1, min=1),
            'per_page':
            fields.Integer(example=25, default=100, min=1),
        },
        response_200=api.Paginated([{
            'track_id':
            fields.String(example="1", description="playlist id"),
            'title':
            fields.String(example="Dal 1", description="track title"),
            'composer_name':
            fields.String(example="Kiss Pisti", description="artist name"),
            'duration':
            fields.Integer(example=111, description="duration in seconds"),
            'tag_ids':
            fields.List(fields.String(example="12", description="tag id"),
                        description="list of gende and mood tag ids"),
            'energey_level':
            fields.String(example="high", description="main energy level"),
            'bpm':
            fields.Integer(example=123, description="BPM"),
            'url':
            fields.String(example="http://asdads", description="track url"),
            'first_used_at':
            fields.Integer(description='time this track  was first used (added tomicrisite)', example=123245)
        }]),
        errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get all tracks that matches the search criteria"""

        page = 1 if not 'page' in api.payload else api.payload['page']
        per_page = 100 if not 'per_page' in api.payload else api.payload['per_page']

        params = {}
        params['order_by'] = api.payload["order_by"] if 'order_by' in api.payload else None
        params['order'] = api.payload["order"] if 'order' in api.payload else None
        params['bpm_min'] = api.payload["bpm_min"] if 'bpm_min' in api.payload else None
        params['bpm_max'] = api.payload["bpm_max"] if 'bpm_max' in api.payload else None
        params['first_used_at_min'] = api.payload["first_used_at_min"] if 'first_used_at_min' in api.payload else None
        params['first_used_at_max'] = api.payload["first_used_at_max"] if 'first_used_at_max' in api.payload else None
        params['filters'] = api.payload["filters"] if 'filters' in api.payload else None

        return siteendpoints.handle_searchlibrary(db.session,
                                                  user_id=get_userid(),
                                                  page=page,
                                                  per_page=per_page,
                                                  **params)


#        return RESP_OK, {
#            'page': page,
#            'per_page': per_page,
#            'items': 6,
#            'data': [
#                {'track_id': "1", 'title': "Halleluja", 'artist': 'Cucu cica', 'duration': 157, 'genre': 'pop', 'energy_level': 'mid', 'bpm': 155, 'url': nat.config['API_ENDPOINT'] + '/../../../static/1.mp3'},
#                {'track_id': "2", 'title': "Kokós Jumbo", 'artist': 'Kozsó', 'duration': 143, 'genre': 'rock', 'energy_level': 'high', 'bpm': 195, 'url': nat.config['API_ENDPOINT'] + '/../../../static/2.mp3'},
#                {'track_id': "3", 'title': "Isten", 'artist': 'fia', 'duration': 194, 'genre': 'opera', 'energy_level': 'low', 'bpm': 15, 'url': nat.config['API_ENDPOINT'] + '/../../../static/3.mp3'},
#                {'track_id': "4", 'title': "Halleluja (ogg)", 'artist': 'Cucu cica', 'duration': 157, 'genre': 'pop', 'energy_level': 'mid', 'bpm': 155, 'url': nat.config['API_ENDPOINT'] + '/../../../static/1.ogg'},
#                {'track_id': "5", 'title': "Kokós Jumbo (ogg)", 'artist': 'Kozsó',  'duration': 143, 'genre': 'rock', 'energy_level': 'high', 'bpm': 195, 'url': nat.config['API_ENDPOINT'] + '/../../../static/2.ogg'},
#                {'track_id': "6", 'title': "Isten (ogg)", 'artist': 'fia', 'duration': 194, 'genre': 'opera', 'energy_level': 'low', 'bpm': 15, 'url': nat.config['API_ENDPOINT'] + '/../../../static/3.ogg'},
#            ],
#        }


@api.route('admin/addlocation')
class AdminAddLocation(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminAddLocation',
                          jsonfields={
                              'name':
                              fields.String(example="top list",
                                            description="search string (in title)",
                                            required=True,
                                            min_length=1),
                              'country':
                              fields.String(example="Hungary", description="location country", required=False),
                              'state':
                              fields.String(example="Pest", description="location stare", required=False),
                              'city':
                              fields.String(example="Budapest", description="location city", required=False),
                              'zip':
                              fields.String(example="1111", description="location zip", required=False),
                              'address':
                              fields.String(example="Gellért tér 3.", description="location address", required=False),
                          },
                          response_200={
                              'location_id': fields.String(example="1", description="location id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Create a new location with the given data"""

        params = {}
        params['name'] = api.payload["name"]
        params['country'] = api.payload["country"] if 'country' in api.payload else None
        params['state'] = api.payload["state"] if 'state' in api.payload else None
        params['city'] = api.payload["city"] if 'city' in api.payload else None
        params['zip'] = api.payload["zip"] if 'zip' in api.payload else None
        params['address'] = api.payload["address"] if 'address' in api.payload else None

        return adminendpoints.handle_addlocation(db.session, user_id=get_userid(), **params)


@api.route('admin/updatelocation')
class AdminUpdateLocation(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminUpdateLocation',
                          jsonfields={
                              'location_id':
                              fields.String(example="1",
                                            description="location id (every other field is optional)",
                                            required=True),
                              'name':
                              fields.String(example="top list",
                                            description="search string (in title)",
                                            required=False,
                                            min_length=1),
                              'country':
                              fields.String(example="Hungary", description="location country", required=False),
                              'state':
                              fields.String(example="Pest", description="location stare", required=False),
                              'city':
                              fields.String(example="Budapest", description="location city", required=False),
                              'zip':
                              fields.String(example="1111", description="location zip", required=False),
                              'address':
                              fields.String(example="Gellért tér 3.", description="location address", required=False),
                          },
                          response_200={
                              'location_id': fields.String(example="1", description="location id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Update a location with the given data"""

        params = {}
        params['location_id'] = int(api.payload["location_id"])
        params['name'] = api.payload["name"] if 'name' in api.payload else None
        params['country'] = api.payload["country"] if 'country' in api.payload else None
        params['state'] = api.payload["state"] if 'state' in api.payload else None
        params['city'] = api.payload["city"] if 'city' in api.payload else None
        params['zip'] = api.payload["zip"] if 'zip' in api.payload else None
        params['address'] = api.payload["address"] if 'address' in api.payload else None

        return adminendpoints.handle_updatelocation(db.session, user_id=get_userid(), **params)


@api.route('admin/listlocations')
class AdminListLocations(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListLocations',
                          jsonfields={},
                          response_200=[{
                              'location_id':
                              fields.String(example="1", description="location id"),
                              'name':
                              fields.String(example="top list", description="search string (in title)"),
                              'country':
                              fields.String(example="Hungary", description="location country"),
                              'state':
                              fields.String(example="Pest", description="location stare"),
                              'city':
                              fields.String(example="Budapest", description="location city"),
                              'zip':
                              fields.String(example="1111", description="location zip"),
                              'address':
                              fields.String(example="Gellért tér 3.", description="location address"),
                              'instance_count':
                              fields.Integer(example=11, description="count of activated instances")
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """List all locations"""

        return adminendpoints.handle_listlocations(db.session, user_id=get_userid())


@api.route('admin/activateinstance')
class AdminActivateInstance(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminActivateInstance',
                          jsonfields={
                              'activation_code':
                              fields.String(example="12323232",
                                            description="instance activation code as displayed on the device",
                                            required=True),
                              'location_id':
                              fields.String(example="1", description="location id", required=True),
                              'label':
                              fields.String(example="player in the kitchen",
                                            description="optional label for the instance",
                                            required=False),
                          },
                          response_200={
                              'location_id': fields.String(example="1", description="location id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Activate an instance using the activation code"""

        params = {}
        params['activation_code'] = api.payload["activation_code"]
        params['location_id'] = int(api.payload["location_id"])
        params['label'] = api.payload["label"] if 'label' in api.payload else None

        return adminendpoints.handle_activateinstance(db.session, user_id=get_userid(), **params)


@api.route('admin/deactivateinstance')
class AdminDeativateInstance(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminDeactivateInstance',
                          jsonfields={
                              'instance_id': fields.String(example="1", description="location id", required=True),
                          },
                          response_200={
                              'instance_id': fields.String(example="1", description="instance id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Deactivate an instance using the instance id"""

        params = {}
        params['instance_id'] = int(api.payload["instance_id"])

        return adminendpoints.handle_deactivateinstance(db.session, user_id=get_userid(), **params)


@api.route('admin/updateinstance')
class AdminUpdateInstance(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminUpdateInstance',
                          jsonfields={
                              'instance_id':
                              fields.String(example="1",
                                            description="instance id (every other field is optional)",
                                            required=True),
                              'update_channel':
                              fields.String(example="stable",
                                            enum=["alpha", "beta", "stable", ""],
                                            description="update channel",
                                            required=False),
                              'class_collective':
                              fields.Boolean(example=True,
                                             description="turns instance class collective mode on and off",
                                             required=False),
                          },
                          response_200={
                              'instance_id': fields.String(example="1", description="instance id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Update a instacne with the given data"""

        params = {}
        params['instance_id'] = int(api.payload["instance_id"])
        params['update_channel'] = api.payload["update_channel"] if 'update_channel' in api.payload else None
        params['class_collective'] = api.payload["class_collective"] if 'class_collective' in api.payload else None

        return adminendpoints.handle_updateinstance(db.session, user_id=get_userid(), **params)


@api.route('admin/listinstances')
class AdminListInstances(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListInstances',
                          jsonfields={
                              'location_id': fields.String(example="1", description="location id", required=False),
                          },
                          response_200=[{
                              'instance_id':
                              fields.String(example="1", description="instance id"),
                              'location_id':
                              fields.String(example="1", description="location id"),
                              'label':
                              fields.String(example="player1", description="player label"),
                              'status':
                              fields.String(example="activated", description="player registration status"),
                              'update_channel':
                              fields.String(example="player1", description="update_channel the player forced to set"),
                              'class_collective':
                              fields.String(example=True,
                                            description="class collect function is enabled on the tablet or not"),
                              'last_authorized_call':
                              fields.String(example=111111111111, description="last authorized call by client"),
                              'created_at':
                              fields.String(example=111111111111, description="first time this app instance connected"),
                              'telemetry':
                              fields.Arbitrary(example={}, description="telemetry data object")
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """List instances using the location id or all instances if not specified"""

        params = {}
        params['location_id'] = int(api.payload["location_id"]) if 'location_id' in api.payload else None

        return adminendpoints.handle_listinstances_with_telemetry(db.session, user_id=get_userid(), **params)


@api.route('admin/listappusers')
class AdminListAppUsers(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListAppUsers',
                          jsonfields={},
                          response_200=[{
                              'user_id':
                              fields.String(example="1", description="instance id"),
                              'email_address':
                              fields.String(example="a@b.c", description="user email address"),
                              'login_count':
                              fields.Integer(example=123, description="number of logins"),
                              'last_login':
                              fields.Integer(example=123, description="js timestamp of last login"),
                              'superuser':
                              fields.Boolean(example=False, description="set the superuser role flag", required=False),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """List all tggapp users"""

        return adminendpoints.handle_listappusers(db.session, user_id=get_userid())


@api.route('admin/listapplocationusers')
class AdminListAppLocationUsers(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListAppLocationUsers',
                          jsonfields={
                              'location_id': fields.String(example="1", description="location_id", required=False),
                          },
                          response_200=[{
                              'locaitonuser_id':
                              fields.String(example="1", description="locationuser id"),
                              'locaiton_id':
                              fields.String(example="1", description="location id"),
                              'user_id':
                              fields.String(example="1", description="user id"),
                              'email_address':
                              fields.String(example="a@b.c", description="user email address"),
                              'label':
                              fields.String(example="Well yes this is a user",
                                            description="label assigned to user add"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """List all tggapp users with location_id of all location-user associations if location_id is not specified"""

        params = {}
        params['location_id'] = int(api.payload["location_id"]) if 'location_id' in api.payload else None

        return adminendpoints.handle_listapplocationusers(db.session, user_id=get_userid(), **params)


@api.route('admin/addappuser')
class AdminAddAppUser(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminAddAppUser',
                          jsonfields={
                              'email_address':
                              fields.String(example="a@b.c", description="user email)", required=True, min_length=1),
                              'password':
                              fields.String(example="1234", min_length=4, description="password/pin", required=True),
                          },
                          response_200={
                              'user_id': fields.String(example="1", description="user id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Create a new tggapp user with email and password"""

        params = {}
        params['email_address'] = api.payload["email_address"]
        params['password'] = api.payload["password"]

        return adminendpoints.handle_addappuser(db.session, user_id=get_userid(), **params)


@api.route('admin/updateappuser')
class AdminUpdateAppUser(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.SUPER_ADMIN])
    @api.requestdecorator('UpdateAppUser',
                          jsonfields={
                              'user_id':
                              fields.String(example="11", description="user id", required=True, min_length=1),
                              'password':
                              fields.String(example="1234",
                                            min_length=4,
                                            description="new password/pin",
                                            required=False),
                              'superuser':
                              fields.Boolean(example=False, description="set the superuser role flag", required=False),
                          },
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """update tggapp user's password"""

        params = {}
        params['user_id_in'] = int(api.payload["user_id"])
        params['password'] = api.payload["password"] if 'password' in api.payload else None
        params['superuser'] = api.payload["superuser"] if 'superuser' in api.payload else None

        return adminendpoints.handle_updateappuser(db.session,
                                                   user_id=get_userid(),
                                                   userrights=get_userrights(),
                                                   **params)


@api.route('admin/addapplocationuser')
class AdminAddAppLocationUser(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminAddAppLocationUser',
                          jsonfields={
                              'location_id':
                              fields.String(example="1", description="location_id", required=True),
                              'user_id':
                              fields.String(example="1", description="user_id", required=True),
                              'pin_code':
                              fields.String(example="12344", description="user_id", required=False),
                              'label':
                              fields.String(example="Well yes this is a user",
                                            description="label assigned to this user-locationa ctivation"),
                          },
                          response_200={
                              'locationuser_id': fields.Integer(example=1, description="user id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """add user to location"""

        params = {}
        params['location_id'] = int(api.payload["location_id"])
        params['user_id_in'] = int(api.payload["user_id"])
        params['label'] = api.payload["label"] if 'label' in api.payload else None
        params['pin_code'] = api.payload["pin_code"] if 'pin_code' in api.payload else None

        return adminendpoints.handle_addapplocationuser(db.session, user_id=get_userid(), **params)


@api.route('admin/removeapplocationuser')
class AdminRemoveAppLocationUser(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.TGGAPP_ADMIN, AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminRemoveAppLocationUser',
                          jsonfields={
                              'location_id': fields.String(example="1", description="location_id", required=True),
                              'user_id': fields.String(example="1", description="user_id", required=True),
                          },
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """remove user from location"""

        params = {}
        params['location_id'] = int(api.payload["location_id"])
        params['user_id_in'] = int(api.payload["user_id"])

        return adminendpoints.handle_removeapplocationuser(db.session, user_id=get_userid(), **params)


@api.route('admin/addplaylist')
class AdminAddPaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminAddPlaylist',
                          jsonfields={
                              'name':
                              fields.String(example="this list",
                                            min_length=3,
                                            description="playlist name",
                                            required=True),
                              'class_type':
                              fields.String(example="classical",
                                            min_length=3,
                                            description="classType metadata",
                                            required=True),
                              'length_type':
                              fields.Integer(example=15, description="lengthType metadata", required=True),
                              'external_url':
                              fields.String(example="http://...",
                                            min_length=3,
                                            description="external sync url",
                                            required=True),
                          },
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Add system playlist content with admin"""

        params = {}
        params['name'] = (api.payload["name"])
        params['class_type'] = (api.payload["class_type"])
        params['length_type'] = (api.payload["length_type"])
        params['external_url'] = (api.payload["external_url"])

        return adminendpoints.handle_addplaylist(db.session, user_id=get_userid(), **params)


@api.route('admin/removeplaylist')
class AdminRemovePaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminRemovePlaylist',
                          jsonfields={'playlist_id': fields.String(example="1", description="pl id", required=True)},
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """remove system playlist content"""

        params = {}
        params['playlist_id'] = int(api.payload["playlist_id"])

        return adminendpoints.handle_removeplaylist(db.session, user_id=get_userid(), **params)


@api.route('admin/listplaylists')
class AdminListPlaylists(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListPlaylists',
                          jsonfields={'user_id': fields.String(example="122", description="user id", required=False)},
                          response_200=[{
                              'playlist_id':
                              fields.String(example="111", description="playlist_id"),
                              'name':
                              fields.String(example="My litl playlist", description="name"),
                              'description':
                              fields.String(example="My litl playlist is a playlist created by me",
                                            description="description of the playlist"),
                              'meta':
                              fields.String(example='{"classType": "strength", "lehgthType": 45}',
                                            description="playlist description metadata for the UI"),
                              'external_url':
                              fields.String(example='http://....', description="playlist external url"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get playlists by user id (or all user + system playlists if none)"""

        params = {}
        params['user_id_in'] = int(api.payload["user_id"]) if 'user_id' in api.payload else None

        return adminendpoints.handle_listplaylists(db.session, user_id=get_userid(), **params)


@api.route('admin/listtracks')
class AdminListTracks(Resource):
    @api.doc(security=['tokenAuth'])
    @multi_auth.login_required
    @require_right([AccessRights.SUPER_ADMIN])
    @api.requestdecorator('AdminListTraks',
                          jsonfields={},
                          response_200=[{
                              'track_id':
                              fields.String(example="1", description="playlist id"),
                              'title':
                              fields.String(example="Dal 1", description="track title"),
                              'composer_name':
                              fields.String(example="Kiss Pisti", description="artist name"),
                              'url':
                              fields.String(example="http://asdads", description="track url"),
                              'first_used_at':
                              fields.Integer(description='time this track  was first used (added tomicrisite)',
                                             example=123245)
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get tracks available to microsite"""

        params = {}
        return adminendpoints.handle_listtracks(db.session, user_id=get_userid(), **params)


@api.route('bgservice/addepidemictrack')
class BgserviceAddEpidemicTrack(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator('BgserviceAddEpidemicTrack',
                          jsonfields={
                              'original_id':
                              fields.String(example="122", description="epidemic track streaming id", required=True),
                              'original_id_2':
                              fields.String(example="122", description="epidemic track track id", required=True),
                              'title':
                              fields.String(example="Aaaa", description="track title", required=True),
                              'composer_id':
                              fields.String(example="111", description="composer id", required=True),
                              'composer_name':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'metadata_tags':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'genres':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'moods':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'tempo_bpm':
                              fields.Integer(example=111, description="bpm info", required=True),
                              'energy_level':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'release_date':
                              fields.Integer(example=111111, description="composer name", required=True),
                              'url':
                              fields.String(example="Andy G.", description="composer name", required=True),
                              'duration':
                              fields.Integer(example=123, description="duration in seconds", required=True),
                              'sha256':
                              fields.String(example="Andy G.", description="composer name", required=True),
                          },
                          response_200={
                              'track_id': fields.String(example="111", description="track id"),
                          },
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Import epidemic track by bgservice"""

        params = {}
        params['original_id'] = api.payload["original_id"]
        params['original_id_2'] = api.payload["original_id_2"]
        params['title'] = (api.payload["title"])
        params['composer_id'] = (api.payload["composer_id"])
        params['composer_name'] = (api.payload["composer_name"])
        params['metadata_tags'] = (api.payload["metadata_tags"])
        params['genres'] = (api.payload["genres"])
        params['moods'] = (api.payload["moods"])
        params['tempo_bpm'] = (api.payload["tempo_bpm"])
        params['energy_level'] = (api.payload["energy_level"])
        params['release_date'] = (api.payload["release_date"])
        params['duration'] = (api.payload["duration"])
        params['sha256'] = (api.payload["sha256"])
        params['url'] = (api.payload["url"])

        return bgserviceendpoints.handle_addepidemictrack(db.session, user_id=get_userid(), **params)


@api.route('bgservice/listtracksbyepidemicid')
class BgserviceGetEpidemicTracksById(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator(
        'BgserviceGetEpidemicTracksById',
        jsonfields={
            'tracks':
            fields.List(
                fields.Nested(api.model(
                    'EpidemicTrackIds', {
                        'original_id': NullableString(
                            example="122", description="epidemic streaming id", required=False),
                        'original_id_2': NullableString(example="122", description="epidemic trackid", required=False),
                    }),
                              required=True))
        },
        response_200=[{
            'track_id': fields.String(example="111", description="track id"),
            'original_id': fields.String(example="111", description="streamingnal id"),
            'original_id_2': fields.String(example="111", description="track id")
        }],
        errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """get track IDs of epidemic tracks by epidemic streaming and track id"""

        params = {}
        params['tracks'] = api.payload["tracks"]

        return bgserviceendpoints.handle_listtracksbyepidemicid(db.session, user_id=get_userid(), **params)


@api.route('bgservice/listplaylists')
class BgserviceListPlaylists(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator('BgserviceListPlaylists',
                          jsonfields={
                              'deleted':
                              fields.Boolean(example=True,
                                             default=False,
                                             description="search for only deleted playistst"),
                          },
                          response_200=[{
                              'playlist_id':
                              fields.String(example="111", description="playlist_id"),
                              'deleted_ad':
                              fields.Integer(example=111111, description="timestamp in MS like JS timestampts")
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get the list og playlists"""

        params = {}
        params['deleted'] = api.payload["deleted"] if 'deleted' in api.payload else False

        return bgserviceendpoints.handle_listplaylists(db.session, user_id=get_userid(), **params)


@api.route('bgservice/getplaylists')
class BgserviceGetPlaylists(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator('BgserviceGetPlaylists',
                          jsonfields={},
                          response_200=[{
                              'playlist_id':
                              fields.String(example="111", description="playlist_id"),
                              'name':
                              fields.String(example="Big Rock", description="playlist name"),
                              'tracks':
                              fields.List(fields.Integer(example=1223, description="track id")),
                              'external_url':
                              fields.String(example='http://....', description="playlist external url"),
                          }],
                          errors=[])
    @fmt_json_response_dict
    @update_last_auth_call
    @autocommit
    def post(self):
        """Get non-deleted system playlists"""

        return bgserviceendpoints.handle_getplaylists(db.session, user_id=get_userid())


@api.route('bgservice/updateplaylist')
class BgserviceUpdatePlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator('BgserviceUpdatePlaylist',
                          jsonfields={
                              'playlist_id': fields.String(example="122", description="playlist id", required=True),
                              'tracks': fields.List(
                                  fields.String(example="122", description="track_id id", required=True)),
                          },
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Update system playlist content by bgservice"""

        params = {}
        params['playlist_id'] = int(api.payload["playlist_id"])
        params['tracks'] = [int(id) for id in api.payload["tracks"]]
        return bgserviceendpoints.handle_updateplaylist(db.session, user_id=get_userid(), **params)


@api.route('bgservice/removeplaylist')
class BgserviceRemovePlaylist(Resource):
    @api.doc(security=['tokenAuth'])
    @bgservice_auth.login_required
    @update_last_auth_call
    @api.requestdecorator('BgserviceRemovePlaylist',
                          jsonfields={
                              'playlist_id': fields.String(example="122", description="playlist id", required=True),
                          },
                          response_200={},
                          errors=[])
    @fmt_json_response_dict
    @autocommit
    def post(self):
        """Remove expired deleted playlist by bgservice"""

        params = {}
        params['playlist_id'] = int(api.payload["playlist_id"])

        return bgserviceendpoints.handle_removeplaylist(db.session, user_id=get_userid(), **params)
